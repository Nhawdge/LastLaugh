// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using QuickType.Map;
//
//    var ldtkData = LdtkData.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace QuickType.Map
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class LdtkData
    {
        [JsonPropertyName("__header__")]
        public Header Header { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("jsonVersion")]
        public string JsonVersion { get; set; }

        [JsonPropertyName("appBuildId")]
        public long AppBuildId { get; set; }

        [JsonPropertyName("nextUid")]
        public long NextUid { get; set; }

        [JsonPropertyName("identifierStyle")]
        public string IdentifierStyle { get; set; }

        [JsonPropertyName("toc")]
        public object[] Toc { get; set; }

        [JsonPropertyName("worldLayout")]
        public string WorldLayout { get; set; }

        [JsonPropertyName("worldGridWidth")]
        public long WorldGridWidth { get; set; }

        [JsonPropertyName("worldGridHeight")]
        public long WorldGridHeight { get; set; }

        [JsonPropertyName("defaultLevelWidth")]
        public long DefaultLevelWidth { get; set; }

        [JsonPropertyName("defaultLevelHeight")]
        public long DefaultLevelHeight { get; set; }

        [JsonPropertyName("defaultPivotX")]
        public long DefaultPivotX { get; set; }

        [JsonPropertyName("defaultPivotY")]
        public long DefaultPivotY { get; set; }

        [JsonPropertyName("defaultGridSize")]
        public long DefaultGridSize { get; set; }

        [JsonPropertyName("defaultEntityWidth")]
        public long DefaultEntityWidth { get; set; }

        [JsonPropertyName("defaultEntityHeight")]
        public long DefaultEntityHeight { get; set; }

        [JsonPropertyName("bgColor")]
        public string BgColor { get; set; }

        [JsonPropertyName("defaultLevelBgColor")]
        public string DefaultLevelBgColor { get; set; }

        [JsonPropertyName("minifyJson")]
        public bool MinifyJson { get; set; }

        [JsonPropertyName("externalLevels")]
        public bool ExternalLevels { get; set; }

        [JsonPropertyName("exportTiled")]
        public bool ExportTiled { get; set; }

        [JsonPropertyName("simplifiedExport")]
        public bool SimplifiedExport { get; set; }

        [JsonPropertyName("imageExportMode")]
        public ImageExportMode ImageExportMode { get; set; }

        [JsonPropertyName("exportLevelBg")]
        public bool ExportLevelBg { get; set; }

        [JsonPropertyName("pngFilePattern")]
        public object PngFilePattern { get; set; }

        [JsonPropertyName("backupOnSave")]
        public bool BackupOnSave { get; set; }

        [JsonPropertyName("backupLimit")]
        public long BackupLimit { get; set; }

        [JsonPropertyName("backupRelPath")]
        public object BackupRelPath { get; set; }

        [JsonPropertyName("levelNamePattern")]
        public string LevelNamePattern { get; set; }

        [JsonPropertyName("tutorialDesc")]
        public object TutorialDesc { get; set; }

        [JsonPropertyName("customCommands")]
        public object[] CustomCommands { get; set; }

        [JsonPropertyName("flags")]
        public object[] Flags { get; set; }

        [JsonPropertyName("defs")]
        public Defs Defs { get; set; }

        [JsonPropertyName("levels")]
        public Level[] Levels { get; set; }

        [JsonPropertyName("worlds")]
        public object[] Worlds { get; set; }

        [JsonPropertyName("dummyWorldIid")]
        public Guid DummyWorldIid { get; set; }
    }

    public partial class Defs
    {
        [JsonPropertyName("layers")]
        public Layer[] Layers { get; set; }

        [JsonPropertyName("entities")]
        public Entity[] Entities { get; set; }

        [JsonPropertyName("tilesets")]
        public Tileset[] Tilesets { get; set; }

        [JsonPropertyName("enums")]
        public object[] Enums { get; set; }

        [JsonPropertyName("externalEnums")]
        public object[] ExternalEnums { get; set; }

        [JsonPropertyName("levelFields")]
        public object[] LevelFields { get; set; }
    }

    public partial class Entity
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("tags")]
        public Tag[] Tags { get; set; }

        [JsonPropertyName("exportToToc")]
        public bool ExportToToc { get; set; }

        [JsonPropertyName("allowOutOfBounds")]
        public bool AllowOutOfBounds { get; set; }

        [JsonPropertyName("doc")]
        public string Doc { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("resizableX")]
        public bool ResizableX { get; set; }

        [JsonPropertyName("resizableY")]
        public bool ResizableY { get; set; }

        [JsonPropertyName("minWidth")]
        public object MinWidth { get; set; }

        [JsonPropertyName("maxWidth")]
        public object MaxWidth { get; set; }

        [JsonPropertyName("minHeight")]
        public object MinHeight { get; set; }

        [JsonPropertyName("maxHeight")]
        public object MaxHeight { get; set; }

        [JsonPropertyName("keepAspectRatio")]
        public bool KeepAspectRatio { get; set; }

        [JsonPropertyName("tileOpacity")]
        public long TileOpacity { get; set; }

        [JsonPropertyName("fillOpacity")]
        public double FillOpacity { get; set; }

        [JsonPropertyName("lineOpacity")]
        public long LineOpacity { get; set; }

        [JsonPropertyName("hollow")]
        public bool Hollow { get; set; }

        [JsonPropertyName("color")]
        public string Color { get; set; }

        [JsonPropertyName("renderMode")]
        public RenderMode RenderMode { get; set; }

        [JsonPropertyName("showName")]
        public bool ShowName { get; set; }

        [JsonPropertyName("tilesetId")]
        public long? TilesetId { get; set; }

        [JsonPropertyName("tileRenderMode")]
        public TileRenderMode TileRenderMode { get; set; }

        [JsonPropertyName("tileRect")]
        public Tile TileRect { get; set; }

        [JsonPropertyName("uiTileRect")]
        public object UiTileRect { get; set; }

        [JsonPropertyName("nineSliceBorders")]
        public object[] NineSliceBorders { get; set; }

        [JsonPropertyName("maxCount")]
        public long MaxCount { get; set; }

        [JsonPropertyName("limitScope")]
        public LimitScope LimitScope { get; set; }

        [JsonPropertyName("limitBehavior")]
        public LimitBehavior LimitBehavior { get; set; }

        [JsonPropertyName("pivotX")]
        public long PivotX { get; set; }

        [JsonPropertyName("pivotY")]
        public long PivotY { get; set; }

        [JsonPropertyName("fieldDefs")]
        public FieldDef[] FieldDefs { get; set; }
    }

    public partial class FieldDef
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("doc")]
        public string Doc { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("type")]
        public string FieldDefType { get; set; }

        [JsonPropertyName("isArray")]
        public bool IsArray { get; set; }

        [JsonPropertyName("canBeNull")]
        public bool CanBeNull { get; set; }

        [JsonPropertyName("arrayMinLength")]
        public long? ArrayMinLength { get; set; }

        [JsonPropertyName("arrayMaxLength")]
        public object ArrayMaxLength { get; set; }

        [JsonPropertyName("editorDisplayMode")]
        public string EditorDisplayMode { get; set; }

        [JsonPropertyName("editorDisplayScale")]
        public long EditorDisplayScale { get; set; }

        [JsonPropertyName("editorDisplayPos")]
        public EditorDisplayPos EditorDisplayPos { get; set; }

        [JsonPropertyName("editorLinkStyle")]
        public EditorLinkStyle EditorLinkStyle { get; set; }

        [JsonPropertyName("editorDisplayColor")]
        public object EditorDisplayColor { get; set; }

        [JsonPropertyName("editorAlwaysShow")]
        public bool EditorAlwaysShow { get; set; }

        [JsonPropertyName("editorShowInWorld")]
        public bool EditorShowInWorld { get; set; }

        [JsonPropertyName("editorCutLongValues")]
        public bool EditorCutLongValues { get; set; }

        [JsonPropertyName("editorTextSuffix")]
        public object EditorTextSuffix { get; set; }

        [JsonPropertyName("editorTextPrefix")]
        public object EditorTextPrefix { get; set; }

        [JsonPropertyName("useForSmartColor")]
        public bool UseForSmartColor { get; set; }

        [JsonPropertyName("exportToToc")]
        public bool ExportToToc { get; set; }

        [JsonPropertyName("searchable")]
        public bool Searchable { get; set; }

        [JsonPropertyName("min")]
        public object Min { get; set; }

        [JsonPropertyName("max")]
        public object Max { get; set; }

        [JsonPropertyName("regex")]
        public object Regex { get; set; }

        [JsonPropertyName("acceptFileTypes")]
        public object AcceptFileTypes { get; set; }

        [JsonPropertyName("defaultOverride")]
        public DefaultOverride DefaultOverride { get; set; }

        [JsonPropertyName("textLanguageMode")]
        public object TextLanguageMode { get; set; }

        [JsonPropertyName("symmetricalRef")]
        public bool SymmetricalRef { get; set; }

        [JsonPropertyName("autoChainRef")]
        public bool AutoChainRef { get; set; }

        [JsonPropertyName("allowOutOfLevelRef")]
        public bool AllowOutOfLevelRef { get; set; }

        [JsonPropertyName("allowedRefs")]
        public AllowedRefs AllowedRefs { get; set; }

        [JsonPropertyName("allowedRefsEntityUid")]
        public object AllowedRefsEntityUid { get; set; }

        [JsonPropertyName("allowedRefTags")]
        public Tag[] AllowedRefTags { get; set; }

        [JsonPropertyName("tilesetUid")]
        public object TilesetUid { get; set; }
    }

    public partial class DefaultOverride
    {
        [JsonPropertyName("id")]
        public Id Id { get; set; }

        [JsonPropertyName("params")]
        public long[] Params { get; set; }
    }

    public partial class Tile
    {
        [JsonPropertyName("tilesetUid")]
        public long TilesetUid { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }

        [JsonPropertyName("w")]
        public long W { get; set; }

        [JsonPropertyName("h")]
        public long H { get; set; }
    }

    public partial class Layer
    {
        [JsonPropertyName("__type")]
        public TypeEnum Type { get; set; }

        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("type")]
        public TypeEnum LayerType { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("doc")]
        public object Doc { get; set; }

        [JsonPropertyName("uiColor")]
        public object UiColor { get; set; }

        [JsonPropertyName("gridSize")]
        public long GridSize { get; set; }

        [JsonPropertyName("guideGridWid")]
        public long GuideGridWid { get; set; }

        [JsonPropertyName("guideGridHei")]
        public long GuideGridHei { get; set; }

        [JsonPropertyName("displayOpacity")]
        public long DisplayOpacity { get; set; }

        [JsonPropertyName("inactiveOpacity")]
        public double InactiveOpacity { get; set; }

        [JsonPropertyName("hideInList")]
        public bool HideInList { get; set; }

        [JsonPropertyName("hideFieldsWhenInactive")]
        public bool HideFieldsWhenInactive { get; set; }

        [JsonPropertyName("canSelectWhenInactive")]
        public bool CanSelectWhenInactive { get; set; }

        [JsonPropertyName("renderInWorldView")]
        public bool RenderInWorldView { get; set; }

        [JsonPropertyName("pxOffsetX")]
        public long PxOffsetX { get; set; }

        [JsonPropertyName("pxOffsetY")]
        public long PxOffsetY { get; set; }

        [JsonPropertyName("parallaxFactorX")]
        public long ParallaxFactorX { get; set; }

        [JsonPropertyName("parallaxFactorY")]
        public long ParallaxFactorY { get; set; }

        [JsonPropertyName("parallaxScaling")]
        public bool ParallaxScaling { get; set; }

        [JsonPropertyName("requiredTags")]
        public object[] RequiredTags { get; set; }

        [JsonPropertyName("excludedTags")]
        public object[] ExcludedTags { get; set; }

        [JsonPropertyName("autoTilesKilledByOtherLayerUid")]
        public object AutoTilesKilledByOtherLayerUid { get; set; }

        [JsonPropertyName("uiFilterTags")]
        public object[] UiFilterTags { get; set; }

        [JsonPropertyName("useAsyncRender")]
        public bool UseAsyncRender { get; set; }

        [JsonPropertyName("intGridValues")]
        public IntGridValue[] IntGridValues { get; set; }

        [JsonPropertyName("intGridValuesGroups")]
        public object[] IntGridValuesGroups { get; set; }

        [JsonPropertyName("autoRuleGroups")]
        public AutoRuleGroup[] AutoRuleGroups { get; set; }

        [JsonPropertyName("autoSourceLayerDefUid")]
        public long? AutoSourceLayerDefUid { get; set; }

        [JsonPropertyName("tilesetDefUid")]
        public long? TilesetDefUid { get; set; }

        [JsonPropertyName("tilePivotX")]
        public long TilePivotX { get; set; }

        [JsonPropertyName("tilePivotY")]
        public long TilePivotY { get; set; }

        [JsonPropertyName("biomeFieldUid")]
        public object BiomeFieldUid { get; set; }
    }

    public partial class AutoRuleGroup
    {
        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("color")]
        public object Color { get; set; }

        [JsonPropertyName("icon")]
        public object Icon { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("isOptional")]
        public bool IsOptional { get; set; }

        [JsonPropertyName("rules")]
        public Rule[] Rules { get; set; }

        [JsonPropertyName("usesWizard")]
        public bool UsesWizard { get; set; }

        [JsonPropertyName("requiredBiomeValues")]
        public object[] RequiredBiomeValues { get; set; }

        [JsonPropertyName("biomeRequirementMode")]
        public long BiomeRequirementMode { get; set; }
    }

    public partial class Rule
    {
        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("tileRectsIds")]
        public long[][] TileRectsIds { get; set; }

        [JsonPropertyName("alpha")]
        public long Alpha { get; set; }

        [JsonPropertyName("chance")]
        public long Chance { get; set; }

        [JsonPropertyName("breakOnMatch")]
        public bool BreakOnMatch { get; set; }

        [JsonPropertyName("pattern")]
        public long[] Pattern { get; set; }

        [JsonPropertyName("flipX")]
        public bool FlipX { get; set; }

        [JsonPropertyName("flipY")]
        public bool FlipY { get; set; }

        [JsonPropertyName("xModulo")]
        public long XModulo { get; set; }

        [JsonPropertyName("yModulo")]
        public long YModulo { get; set; }

        [JsonPropertyName("xOffset")]
        public long XOffset { get; set; }

        [JsonPropertyName("yOffset")]
        public long YOffset { get; set; }

        [JsonPropertyName("tileXOffset")]
        public long TileXOffset { get; set; }

        [JsonPropertyName("tileYOffset")]
        public long TileYOffset { get; set; }

        [JsonPropertyName("tileRandomXMin")]
        public long TileRandomXMin { get; set; }

        [JsonPropertyName("tileRandomXMax")]
        public long TileRandomXMax { get; set; }

        [JsonPropertyName("tileRandomYMin")]
        public long TileRandomYMin { get; set; }

        [JsonPropertyName("tileRandomYMax")]
        public long TileRandomYMax { get; set; }

        [JsonPropertyName("checker")]
        public ImageExportMode Checker { get; set; }

        [JsonPropertyName("tileMode")]
        public TileMode TileMode { get; set; }

        [JsonPropertyName("pivotX")]
        public long PivotX { get; set; }

        [JsonPropertyName("pivotY")]
        public long PivotY { get; set; }

        [JsonPropertyName("outOfBoundsValue")]
        public long OutOfBoundsValue { get; set; }

        [JsonPropertyName("invalidated")]
        public bool Invalidated { get; set; }

        [JsonPropertyName("perlinActive")]
        public bool PerlinActive { get; set; }

        [JsonPropertyName("perlinSeed")]
        public long PerlinSeed { get; set; }

        [JsonPropertyName("perlinScale")]
        public double PerlinScale { get; set; }

        [JsonPropertyName("perlinOctaves")]
        public long PerlinOctaves { get; set; }
    }

    public partial class IntGridValue
    {
        [JsonPropertyName("value")]
        public long Value { get; set; }

        [JsonPropertyName("identifier")]
        public object Identifier { get; set; }

        [JsonPropertyName("color")]
        public string Color { get; set; }

        [JsonPropertyName("tile")]
        public object Tile { get; set; }

        [JsonPropertyName("groupUid")]
        public long GroupUid { get; set; }
    }

    public partial class Tileset
    {
        [JsonPropertyName("__cWid")]
        public long CWid { get; set; }

        [JsonPropertyName("__cHei")]
        public long CHei { get; set; }

        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("relPath")]
        public string RelPath { get; set; }

        [JsonPropertyName("embedAtlas")]
        public object EmbedAtlas { get; set; }

        [JsonPropertyName("pxWid")]
        public long PxWid { get; set; }

        [JsonPropertyName("pxHei")]
        public long PxHei { get; set; }

        [JsonPropertyName("tileGridSize")]
        public long TileGridSize { get; set; }

        [JsonPropertyName("spacing")]
        public long Spacing { get; set; }

        [JsonPropertyName("padding")]
        public long Padding { get; set; }

        [JsonPropertyName("tags")]
        public object[] Tags { get; set; }

        [JsonPropertyName("tagsSourceEnumUid")]
        public object TagsSourceEnumUid { get; set; }

        [JsonPropertyName("enumTags")]
        public object[] EnumTags { get; set; }

        [JsonPropertyName("customData")]
        public object[] CustomData { get; set; }

        [JsonPropertyName("savedSelections")]
        public object[] SavedSelections { get; set; }

        [JsonPropertyName("cachedPixelData")]
        public CachedPixelData CachedPixelData { get; set; }
    }

    public partial class CachedPixelData
    {
        [JsonPropertyName("opaqueTiles")]
        public string OpaqueTiles { get; set; }

        [JsonPropertyName("averageColors")]
        public string AverageColors { get; set; }
    }

    public partial class Header
    {
        [JsonPropertyName("fileType")]
        public string FileType { get; set; }

        [JsonPropertyName("app")]
        public string App { get; set; }

        [JsonPropertyName("doc")]
        public Uri Doc { get; set; }

        [JsonPropertyName("schema")]
        public Uri Schema { get; set; }

        [JsonPropertyName("appAuthor")]
        public string AppAuthor { get; set; }

        [JsonPropertyName("appVersion")]
        public string AppVersion { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }
    }

    public partial class Level
    {
        [JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        [JsonPropertyName("worldX")]
        public long WorldX { get; set; }

        [JsonPropertyName("worldY")]
        public long WorldY { get; set; }

        [JsonPropertyName("worldDepth")]
        public long WorldDepth { get; set; }

        [JsonPropertyName("pxWid")]
        public long PxWid { get; set; }

        [JsonPropertyName("pxHei")]
        public long PxHei { get; set; }

        [JsonPropertyName("__bgColor")]
        public string BgColor { get; set; }

        [JsonPropertyName("bgColor")]
        public object LevelBgColor { get; set; }

        [JsonPropertyName("useAutoIdentifier")]
        public bool UseAutoIdentifier { get; set; }

        [JsonPropertyName("bgRelPath")]
        public object BgRelPath { get; set; }

        [JsonPropertyName("bgPos")]
        public object LevelBgPos { get; set; }

        [JsonPropertyName("bgPivotX")]
        public double BgPivotX { get; set; }

        [JsonPropertyName("bgPivotY")]
        public double BgPivotY { get; set; }

        [JsonPropertyName("__smartColor")]
        public string SmartColor { get; set; }

        [JsonPropertyName("__bgPos")]
        public object BgPos { get; set; }

        [JsonPropertyName("externalRelPath")]
        public object ExternalRelPath { get; set; }

        [JsonPropertyName("fieldInstances")]
        public object[] FieldInstances { get; set; }

        [JsonPropertyName("layerInstances")]
        public LayerInstance[] LayerInstances { get; set; }

        [JsonPropertyName("__neighbours")]
        public Neighbour[] Neighbours { get; set; }
    }

    public partial class LayerInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__type")]
        public TypeEnum Type { get; set; }

        [JsonPropertyName("__cWid")]
        public long CWid { get; set; }

        [JsonPropertyName("__cHei")]
        public long CHei { get; set; }

        [JsonPropertyName("__gridSize")]
        public long GridSize { get; set; }

        [JsonPropertyName("__opacity")]
        public long Opacity { get; set; }

        [JsonPropertyName("__pxTotalOffsetX")]
        public long PxTotalOffsetX { get; set; }

        [JsonPropertyName("__pxTotalOffsetY")]
        public long PxTotalOffsetY { get; set; }

        [JsonPropertyName("__tilesetDefUid")]
        public long? TilesetDefUid { get; set; }

        [JsonPropertyName("__tilesetRelPath")]
        public TilesetRelPath? TilesetRelPath { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("levelId")]
        public long LevelId { get; set; }

        [JsonPropertyName("layerDefUid")]
        public long LayerDefUid { get; set; }

        [JsonPropertyName("pxOffsetX")]
        public long PxOffsetX { get; set; }

        [JsonPropertyName("pxOffsetY")]
        public long PxOffsetY { get; set; }

        [JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [JsonPropertyName("optionalRules")]
        public object[] OptionalRules { get; set; }

        [JsonPropertyName("intGridCsv")]
        public long[] IntGridCsv { get; set; }

        [JsonPropertyName("autoLayerTiles")]
        public AutoLayerTileElement[] AutoLayerTiles { get; set; }

        [JsonPropertyName("seed")]
        public long Seed { get; set; }

        [JsonPropertyName("overrideTilesetUid")]
        public object OverrideTilesetUid { get; set; }

        [JsonPropertyName("gridTiles")]
        public AutoLayerTileElement[] GridTiles { get; set; }

        [JsonPropertyName("entityInstances")]
        public EntityInstance[] EntityInstances { get; set; }
    }

    public partial class AutoLayerTileElement
    {
        [JsonPropertyName("px")]
        public long[] Px { get; set; }

        [JsonPropertyName("src")]
        public long[] Src { get; set; }

        [JsonPropertyName("f")]
        public long F { get; set; }

        [JsonPropertyName("t")]
        public long T { get; set; }

        [JsonPropertyName("d")]
        public long[] D { get; set; }

        [JsonPropertyName("a")]
        public long A { get; set; }
    }

    public partial class EntityInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__grid")]
        public long[] Grid { get; set; }

        [JsonPropertyName("__pivot")]
        public long[] Pivot { get; set; }

        [JsonPropertyName("__tags")]
        public Tag[] Tags { get; set; }

        [JsonPropertyName("__tile")]
        public Tile Tile { get; set; }

        [JsonPropertyName("__smartColor")]
        public string SmartColor { get; set; }

        [JsonPropertyName("iid")]
        public Guid Iid { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("defUid")]
        public long DefUid { get; set; }

        [JsonPropertyName("px")]
        public long[] Px { get; set; }

        [JsonPropertyName("fieldInstances")]
        public FieldInstance[] FieldInstances { get; set; }

        [JsonPropertyName("__worldX")]
        public long WorldX { get; set; }

        [JsonPropertyName("__worldY")]
        public long WorldY { get; set; }
    }

    public partial class FieldInstance
    {
        [JsonPropertyName("__identifier")]
        public string Identifier { get; set; }

        [JsonPropertyName("__type")]
        public string Type { get; set; }

        [JsonPropertyName("__value")]
        public ValueUnion Value { get; set; }

        [JsonPropertyName("__tile")]
        public object Tile { get; set; }

        [JsonPropertyName("defUid")]
        public long DefUid { get; set; }

        [JsonPropertyName("realEditorValues")]
        public RealEditorValue[] RealEditorValues { get; set; }
    }

    public partial class RealEditorValue
    {
        [JsonPropertyName("id")]
        public Id Id { get; set; }

        [JsonPropertyName("params")]
        public Param[] Params { get; set; }
    }

    public partial class ValueElement
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("entityIid")]
        public Guid? EntityIid { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("layerIid")]
        public Guid? LayerIid { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("levelIid")]
        public Guid? LevelIid { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("worldIid")]
        public Guid? WorldIid { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("cx")]
        public long? Cx { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("cy")]
        public long? Cy { get; set; }
    }

    public partial class Neighbour
    {
        [JsonPropertyName("levelIid")]
        public Guid LevelIid { get; set; }

        [JsonPropertyName("dir")]
        public string Dir { get; set; }
    }

    public enum Tag { Ability, Dog, Enemy, Player, Puzzle, Threat };

    public enum AllowedRefs { Any, OnlySame, OnlyTags };

    public enum Id { VInt, VString };

    public enum EditorDisplayPos { Above };

    public enum EditorLinkStyle { CurvedArrow, StraightArrow };

    public enum LimitBehavior { MoveLastOne };

    public enum LimitScope { PerLevel, PerWorld };

    public enum RenderMode { Rectangle, Tile };

    public enum TileRenderMode { FitInside };

    public enum ImageExportMode { None };

    public enum TileMode { Single };

    public enum TypeEnum { AutoLayer, Entities, IntGrid, Tiles };

    public enum TilesetRelPath { ArtSciFiTilesetPng, ArtTilesPng };

    public partial struct Param
    {
        public long? Integer;
        public string String;

        public static implicit operator Param(long Integer) => new Param { Integer = Integer };
        public static implicit operator Param(string String) => new Param { String = String };
    }

    public partial struct ValueUnion
    {
        public long? Integer;
        public ValueElement ValueElement;
        public ValueElement[] ValueElementArray;

        public static implicit operator ValueUnion(long Integer) => new ValueUnion { Integer = Integer };
        public static implicit operator ValueUnion(ValueElement ValueElement) => new ValueUnion { ValueElement = ValueElement };
        public static implicit operator ValueUnion(ValueElement[] ValueElementArray) => new ValueUnion { ValueElementArray = ValueElementArray };
        public bool IsNull => ValueElementArray == null && ValueElement == null && Integer == null;
    }

    public partial class LdtkData
    {
        public static LdtkData FromJson(string json) => JsonSerializer.Deserialize<LdtkData>(json, QuickType.Map.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LdtkData self) => JsonSerializer.Serialize(self, QuickType.Map.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                TagConverter.Singleton,
                AllowedRefsConverter.Singleton,
                IdConverter.Singleton,
                EditorDisplayPosConverter.Singleton,
                EditorLinkStyleConverter.Singleton,
                LimitBehaviorConverter.Singleton,
                LimitScopeConverter.Singleton,
                RenderModeConverter.Singleton,
                TileRenderModeConverter.Singleton,
                TypeEnumConverter.Singleton,
                ImageExportModeConverter.Singleton,
                TileModeConverter.Singleton,
                TilesetRelPathConverter.Singleton,
                ValueUnionConverter.Singleton,
                ParamConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class TagConverter : JsonConverter<Tag>
    {
        public override bool CanConvert(Type t) => t == typeof(Tag);

        public override Tag Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Ability":
                    return Tag.Ability;
                case "DOG":
                    return Tag.Dog;
                case "ENEMY":
                    return Tag.Enemy;
                case "PUZZLE":
                    return Tag.Puzzle;
                case "Player":
                    return Tag.Player;
                case "Threat":
                    return Tag.Threat;
            }
            throw new Exception("Cannot unmarshal type Tag");
        }

        public override void Write(Utf8JsonWriter writer, Tag value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Tag.Ability:
                    JsonSerializer.Serialize(writer, "Ability", options);
                    return;
                case Tag.Dog:
                    JsonSerializer.Serialize(writer, "DOG", options);
                    return;
                case Tag.Enemy:
                    JsonSerializer.Serialize(writer, "ENEMY", options);
                    return;
                case Tag.Puzzle:
                    JsonSerializer.Serialize(writer, "PUZZLE", options);
                    return;
                case Tag.Player:
                    JsonSerializer.Serialize(writer, "Player", options);
                    return;
                case Tag.Threat:
                    JsonSerializer.Serialize(writer, "Threat", options);
                    return;
            }
            throw new Exception("Cannot marshal type Tag");
        }

        public static readonly TagConverter Singleton = new TagConverter();
    }

    internal class AllowedRefsConverter : JsonConverter<AllowedRefs>
    {
        public override bool CanConvert(Type t) => t == typeof(AllowedRefs);

        public override AllowedRefs Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Any":
                    return AllowedRefs.Any;
                case "OnlySame":
                    return AllowedRefs.OnlySame;
                case "OnlyTags":
                    return AllowedRefs.OnlyTags;
            }
            throw new Exception("Cannot unmarshal type AllowedRefs");
        }

        public override void Write(Utf8JsonWriter writer, AllowedRefs value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case AllowedRefs.Any:
                    JsonSerializer.Serialize(writer, "Any", options);
                    return;
                case AllowedRefs.OnlySame:
                    JsonSerializer.Serialize(writer, "OnlySame", options);
                    return;
                case AllowedRefs.OnlyTags:
                    JsonSerializer.Serialize(writer, "OnlyTags", options);
                    return;
            }
            throw new Exception("Cannot marshal type AllowedRefs");
        }

        public static readonly AllowedRefsConverter Singleton = new AllowedRefsConverter();
    }

    internal class IdConverter : JsonConverter<Id>
    {
        public override bool CanConvert(Type t) => t == typeof(Id);

        public override Id Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "V_Int":
                    return Id.VInt;
                case "V_String":
                    return Id.VString;
            }
            throw new Exception("Cannot unmarshal type Id");
        }

        public override void Write(Utf8JsonWriter writer, Id value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Id.VInt:
                    JsonSerializer.Serialize(writer, "V_Int", options);
                    return;
                case Id.VString:
                    JsonSerializer.Serialize(writer, "V_String", options);
                    return;
            }
            throw new Exception("Cannot marshal type Id");
        }

        public static readonly IdConverter Singleton = new IdConverter();
    }

    internal class EditorDisplayPosConverter : JsonConverter<EditorDisplayPos>
    {
        public override bool CanConvert(Type t) => t == typeof(EditorDisplayPos);

        public override EditorDisplayPos Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "Above")
            {
                return EditorDisplayPos.Above;
            }
            throw new Exception("Cannot unmarshal type EditorDisplayPos");
        }

        public override void Write(Utf8JsonWriter writer, EditorDisplayPos value, JsonSerializerOptions options)
        {
            if (value == EditorDisplayPos.Above)
            {
                JsonSerializer.Serialize(writer, "Above", options);
                return;
            }
            throw new Exception("Cannot marshal type EditorDisplayPos");
        }

        public static readonly EditorDisplayPosConverter Singleton = new EditorDisplayPosConverter();
    }

    internal class EditorLinkStyleConverter : JsonConverter<EditorLinkStyle>
    {
        public override bool CanConvert(Type t) => t == typeof(EditorLinkStyle);

        public override EditorLinkStyle Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "CurvedArrow":
                    return EditorLinkStyle.CurvedArrow;
                case "StraightArrow":
                    return EditorLinkStyle.StraightArrow;
            }
            throw new Exception("Cannot unmarshal type EditorLinkStyle");
        }

        public override void Write(Utf8JsonWriter writer, EditorLinkStyle value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case EditorLinkStyle.CurvedArrow:
                    JsonSerializer.Serialize(writer, "CurvedArrow", options);
                    return;
                case EditorLinkStyle.StraightArrow:
                    JsonSerializer.Serialize(writer, "StraightArrow", options);
                    return;
            }
            throw new Exception("Cannot marshal type EditorLinkStyle");
        }

        public static readonly EditorLinkStyleConverter Singleton = new EditorLinkStyleConverter();
    }

    internal class LimitBehaviorConverter : JsonConverter<LimitBehavior>
    {
        public override bool CanConvert(Type t) => t == typeof(LimitBehavior);

        public override LimitBehavior Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "MoveLastOne")
            {
                return LimitBehavior.MoveLastOne;
            }
            throw new Exception("Cannot unmarshal type LimitBehavior");
        }

        public override void Write(Utf8JsonWriter writer, LimitBehavior value, JsonSerializerOptions options)
        {
            if (value == LimitBehavior.MoveLastOne)
            {
                JsonSerializer.Serialize(writer, "MoveLastOne", options);
                return;
            }
            throw new Exception("Cannot marshal type LimitBehavior");
        }

        public static readonly LimitBehaviorConverter Singleton = new LimitBehaviorConverter();
    }

    internal class LimitScopeConverter : JsonConverter<LimitScope>
    {
        public override bool CanConvert(Type t) => t == typeof(LimitScope);

        public override LimitScope Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "PerLevel":
                    return LimitScope.PerLevel;
                case "PerWorld":
                    return LimitScope.PerWorld;
            }
            throw new Exception("Cannot unmarshal type LimitScope");
        }

        public override void Write(Utf8JsonWriter writer, LimitScope value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case LimitScope.PerLevel:
                    JsonSerializer.Serialize(writer, "PerLevel", options);
                    return;
                case LimitScope.PerWorld:
                    JsonSerializer.Serialize(writer, "PerWorld", options);
                    return;
            }
            throw new Exception("Cannot marshal type LimitScope");
        }

        public static readonly LimitScopeConverter Singleton = new LimitScopeConverter();
    }

    internal class RenderModeConverter : JsonConverter<RenderMode>
    {
        public override bool CanConvert(Type t) => t == typeof(RenderMode);

        public override RenderMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Rectangle":
                    return RenderMode.Rectangle;
                case "Tile":
                    return RenderMode.Tile;
            }
            throw new Exception("Cannot unmarshal type RenderMode");
        }

        public override void Write(Utf8JsonWriter writer, RenderMode value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case RenderMode.Rectangle:
                    JsonSerializer.Serialize(writer, "Rectangle", options);
                    return;
                case RenderMode.Tile:
                    JsonSerializer.Serialize(writer, "Tile", options);
                    return;
            }
            throw new Exception("Cannot marshal type RenderMode");
        }

        public static readonly RenderModeConverter Singleton = new RenderModeConverter();
    }

    internal class TileRenderModeConverter : JsonConverter<TileRenderMode>
    {
        public override bool CanConvert(Type t) => t == typeof(TileRenderMode);

        public override TileRenderMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "FitInside")
            {
                return TileRenderMode.FitInside;
            }
            throw new Exception("Cannot unmarshal type TileRenderMode");
        }

        public override void Write(Utf8JsonWriter writer, TileRenderMode value, JsonSerializerOptions options)
        {
            if (value == TileRenderMode.FitInside)
            {
                JsonSerializer.Serialize(writer, "FitInside", options);
                return;
            }
            throw new Exception("Cannot marshal type TileRenderMode");
        }

        public static readonly TileRenderModeConverter Singleton = new TileRenderModeConverter();
    }

    internal class TypeEnumConverter : JsonConverter<TypeEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum);

        public override TypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "AutoLayer":
                    return TypeEnum.AutoLayer;
                case "Entities":
                    return TypeEnum.Entities;
                case "IntGrid":
                    return TypeEnum.IntGrid;
                case "Tiles":
                    return TypeEnum.Tiles;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void Write(Utf8JsonWriter writer, TypeEnum value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TypeEnum.AutoLayer:
                    JsonSerializer.Serialize(writer, "AutoLayer", options);
                    return;
                case TypeEnum.Entities:
                    JsonSerializer.Serialize(writer, "Entities", options);
                    return;
                case TypeEnum.IntGrid:
                    JsonSerializer.Serialize(writer, "IntGrid", options);
                    return;
                case TypeEnum.Tiles:
                    JsonSerializer.Serialize(writer, "Tiles", options);
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ImageExportModeConverter : JsonConverter<ImageExportMode>
    {
        public override bool CanConvert(Type t) => t == typeof(ImageExportMode);

        public override ImageExportMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "None")
            {
                return ImageExportMode.None;
            }
            throw new Exception("Cannot unmarshal type ImageExportMode");
        }

        public override void Write(Utf8JsonWriter writer, ImageExportMode value, JsonSerializerOptions options)
        {
            if (value == ImageExportMode.None)
            {
                JsonSerializer.Serialize(writer, "None", options);
                return;
            }
            throw new Exception("Cannot marshal type ImageExportMode");
        }

        public static readonly ImageExportModeConverter Singleton = new ImageExportModeConverter();
    }

    internal class TileModeConverter : JsonConverter<TileMode>
    {
        public override bool CanConvert(Type t) => t == typeof(TileMode);

        public override TileMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "Single")
            {
                return TileMode.Single;
            }
            throw new Exception("Cannot unmarshal type TileMode");
        }

        public override void Write(Utf8JsonWriter writer, TileMode value, JsonSerializerOptions options)
        {
            if (value == TileMode.Single)
            {
                JsonSerializer.Serialize(writer, "Single", options);
                return;
            }
            throw new Exception("Cannot marshal type TileMode");
        }

        public static readonly TileModeConverter Singleton = new TileModeConverter();
    }

    internal class TilesetRelPathConverter : JsonConverter<TilesetRelPath>
    {
        public override bool CanConvert(Type t) => t == typeof(TilesetRelPath);

        public override TilesetRelPath Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "../Art/Tiles.png":
                    return TilesetRelPath.ArtTilesPng;
                case "../Art/sci-fi-tileset.png":
                    return TilesetRelPath.ArtSciFiTilesetPng;
            }
            throw new Exception("Cannot unmarshal type TilesetRelPath");
        }

        public override void Write(Utf8JsonWriter writer, TilesetRelPath value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TilesetRelPath.ArtTilesPng:
                    JsonSerializer.Serialize(writer, "../Art/Tiles.png", options);
                    return;
                case TilesetRelPath.ArtSciFiTilesetPng:
                    JsonSerializer.Serialize(writer, "../Art/sci-fi-tileset.png", options);
                    return;
            }
            throw new Exception("Cannot marshal type TilesetRelPath");
        }

        public static readonly TilesetRelPathConverter Singleton = new TilesetRelPathConverter();
    }

    internal class ValueUnionConverter : JsonConverter<ValueUnion>
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion);

        public override ValueUnion Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.Null:
                    return new ValueUnion { };
                case JsonTokenType.Number:
                    var integerValue = reader.GetInt64();
                    return new ValueUnion { Integer = integerValue };
                case JsonTokenType.StartObject:
                    var objectValue = JsonSerializer.Deserialize<ValueElement>(ref reader, options);
                    return new ValueUnion { ValueElement = objectValue };
                case JsonTokenType.StartArray:
                    var arrayValue = JsonSerializer.Deserialize<ValueElement[]>(ref reader, options);
                    return new ValueUnion { ValueElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void Write(Utf8JsonWriter writer, ValueUnion value, JsonSerializerOptions options)
        {
            if (value.IsNull)
            {
                writer.WriteNullValue();
                return;
            }
            if (value.Integer != null)
            {
                JsonSerializer.Serialize(writer, value.Integer.Value, options);
                return;
            }
            if (value.ValueElementArray != null)
            {
                JsonSerializer.Serialize(writer, value.ValueElementArray, options);
                return;
            }
            if (value.ValueElement != null)
            {
                JsonSerializer.Serialize(writer, value.ValueElement, options);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }

    internal class ParamConverter : JsonConverter<Param>
    {
        public override bool CanConvert(Type t) => t == typeof(Param);

        public override Param Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.Number:
                    var integerValue = reader.GetInt64();
                    return new Param { Integer = integerValue };
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    return new Param { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Param");
        }

        public override void Write(Utf8JsonWriter writer, Param value, JsonSerializerOptions options)
        {
            if (value.Integer != null)
            {
                JsonSerializer.Serialize(writer, value.Integer.Value, options);
                return;
            }
            if (value.String != null)
            {
                JsonSerializer.Serialize(writer, value.String, options);
                return;
            }
            throw new Exception("Cannot marshal type Param");
        }

        public static readonly ParamConverter Singleton = new ParamConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
